document.addEventListener('DOMContentLoaded', () => {
  const e = document.querySelectorAll('img.lazy');
  let n;
  function t() {
    n && clearTimeout(n),
      (n = setTimeout(() => {
        const n = window.pageYOffset;
        e.forEach((e) => {
          e.offsetTop < window.innerHeight + n &&
            ((e.src = e.dataset.src), e.classList.remove('lazy'));
        }),
          e.length === 0 &&
            (document.removeEventListener('scroll', t),
            window.removeEventListener('resize', t),
            window.removeEventListener('orientationChange', t));
      }, 20));
  }
  document.addEventListener('scroll', t),
    window.addEventListener('resize', t),
    window.addEventListener('orientationChange', t);
});
const img = document.querySelector('.img');
const oldButton = document.querySelector('#old-person');
const careButton = document.querySelector('#caregiver');
const regex =
  (document.getElementById('pictureUser').addEventListener('change', (e) => {
    e.target.files.length !== 0 &&
      ((e = e.target.files[0]), (e = URL.createObjectURL(e)), (img.src = e));
  }),
  /^(?:NL-)?(\d{4})\s*([A-Z]{2})$/i);
const formElement = document.querySelector('.form');
const errorMessage = document.querySelector('.pElement');
const zipCode = document.querySelector('#zipcode');
const houseNumber = document.querySelector('#houseNumber');
const adressButton = document.querySelector('.adress');
const city = document.querySelector('.city');
const street = document.querySelector('.street');
const zipCodeText = document.querySelector('.zipcode');
const province = document.querySelector('.province');
const cityInput = document.querySelector('#city');
const streetInput = document.querySelector('#street');
const zipCodeTextInput = document.querySelector('#zipcode');
const provinceInput = document.querySelector('#province');
const pictureInput = document.querySelector('.pictureInput');
const latInput = document.querySelector('#lat');
const lngInput = document.querySelector('#lng');
const checkboxesSearch = document.querySelectorAll(
  '.search input[type=checkbox]:checked'
);
const checkboxes1 = document.querySelectorAll(
  '.checkbox1 input[type=checkbox]:checked'
);
const checkboxes2 = document.querySelectorAll(
  '.checkbox2 input[type=checkbox]:checked'
);
function styleButton() {
  window.location.pathname === '/register' &&
    ((oldButton.style.backgroundColor = '#519188'),
    (oldButton.style.boxShadow = '0px 0px 5px #519188'),
    (oldButton.style.fontWeight = 'bold'),
    oldButton.classList.add('selected'),
    (careButton.style.backgroundColor = 'white'),
    (careButton.style.boxShadow = 'none'),
    (careButton.style.fontWeight = 'normal')),
    window.location.pathname === '/register-zorg' &&
      ((careButton.style.backgroundColor = '#519188'),
      (careButton.style.boxShadow = '0px 0px 5px #519188'),
      (careButton.style.fontWeight = 'bold'),
      careButton.classList.add('selected'),
      (oldButton.style.backgroundColor = 'white'),
      (oldButton.style.boxShadow = 'none'),
      (oldButton.style.fontWeight = 'normal'));
}
formElement.addEventListener('submit', (e) => {
  e.preventDefault(),
    regex.test(zipCode.value) ||
      (errorMessage.textContent = 'De postcode is onjuist'),
    cityInput.value || (errorMessage.textContent = 'Genereer een adress'),
    pictureInput.value || (errorMessage.textContent = 'Vul een foto in'),
    checkboxesSearch.length === 0 &&
      (errorMessage.textContent = 'Geef aan waar u naar zoekt'),
    checkboxes1.length === 0 &&
      (errorMessage.textContent = 'Vul de eigenschappen in'),
    checkboxes2.length === 0 &&
      (errorMessage.textContent = 'Vul de eigenschappen in'),
    regex.test(zipCode.value) && cityInput.value && formElement.submit();
}),
  adressButton.addEventListener('click', async () => {
    zipCode.value &&
      houseNumber.value &&
      (zipCode.value.toUpperCase(),
      fetch(
        `http://api.postcodedata.nl/v1/postcode/?postcode=${zipCode.value}&streetnumber=${houseNumber.value}&ref=domeinnaam.nl&type=json`
      )
        .then((e) => e.json())
        .then((e) => {
          e.status === 'error' &&
            (errorMessage.textContent = 'Adress is onjuist'),
            e.status === 'ok' &&
              ((city.textContent = e.details[0].city),
              (street.textContent = e.details[0].street),
              (zipCodeText.textContent = e.details[0].postcode),
              (province.textContent = e.details[0].province),
              (cityInput.value = e.details[0].city),
              (streetInput.value = e.details[0].street),
              (zipCodeTextInput.value = e.details[0].postcode),
              (provinceInput.value = e.details[0].province),
              (latInput.value = e.details[0].lat),
              (lngInput.value = e.details[0].lon));
        })
        .catch((e) => {
          throw e;
        }));
  }),
  styleButton();
const latData = document.querySelector('#lat').value;
const latNumber = parseFloat(latData);
const lngData = document.querySelector('#lng').value;
const lngNumber = parseFloat(lngData);
function initMap() {
  const a = { lat: latNumber, lng: lngNumber };
  const e = new google.maps.Map(document.getElementById('map'), {
    zoom: 14,
    center: a,
  });
  new google.maps.Marker({ position: a, map: e });
}
window.initMap = initMap;
const nextButton = document.querySelector('.next');
const prevButton = document.querySelector('.previous');
const carouselWrapper = document.querySelector('.x-overflow');
const carouselItem = document.querySelector('.section');
(carouselWrapper.style.overflowX = 'hidden'),
  nextButton.addEventListener('click', () => {
    carouselWrapper.scrollLeft += carouselItem.clientWidth;
  }),
  prevButton.addEventListener('click', () => {
    carouselWrapper.scrollLeft -= carouselItem.clientWidth;
  });
